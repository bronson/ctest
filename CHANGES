TODO:
- Add routine to parse cmdline args.
  --test will initiate unit testing (optional arg).
     --list lists unit tests,
	 --skip or --run to select tests to run,
	 --verbose to dump a lot of info?  Maybe no need for this one.
	 --brittle to exit on the first failure and not try further tests.
 * TODO: print test results, test suites, etc as they run.
 *    Add a quiet flag that will suppress printing unless a test fails.
 *    quiet=0, full printing
 *    quiet=1, test results not printed
 *    quiet=2, suite results not printed
 *    quiet=3, summary not printed.
- Add some functional tests to check the command line arguments.
- Add ability to easily run tests with different levels of verbosity.
- Add the ability to temporarily disable tests but leave them in the test deck.
- Add ability to run only the named test or tests.
	 --skip or --only to select tests to run,
- Write the fork-to-test-assert-fail-outside-ctest_start code.
  Nope!  No forking.  Too complex.  Maybe can write a func test for this?
- Get rid of the vsprintf potential buffer overflow.
- Don't malloc on every test.  Keep a cache or something.
- Optionally install signal handlers.  int/fp /0 and bus errors.
  Can we recover just like we do for failed asserts?
- Make a homepage for it, replace the URL in the readme file.

Version 0.8, IN PROGRESS
- Renamed mutest to ctest.  A generic name is better than a lame one.
- Get rid of mutest-config.  it was a complex solution to a simple problem.
- Now compiled with -pedantic.  Straight ANSI C, not even any // comments.
- Can now run asserts without having them wrapped in ctest_start
  (if the assert fails, the app exits immediately).
- Added ctest_preferences to provide more control over how ctest runs.
- moved test inversion from the public API to an obscure prefs item.

Version 0.71, 20 Oct 2007
- created the mutest_start macro, cleaned up the assertion routines.
- Created test flavors.  Now it's easy for people to customize their asserts.
- Split mutest from tmtest's zutest.c/.h files.
- Got rid of mutest_proc, now clients handle calling the unit tests 100%

Version 0.7,  16 Feb 2007
- turn dependency tree into functions

Version 0.62, 22 Jan 2007
- clean up failure messages

Version 0.61, 30 Apr 2006 
- first version worth releasing


Would be nice but might never happen:
- Add the optional ability to fork before each test.  It's a pretty useless
  feature but some guys seem pretty hot about this.
  - "A test could crash and fool the framework into thinking that it passed!"
    - Erm, you're probably more likely to be hit by lightning.
  - This would allow the ability to specify an optional timeout.
- AssertStrEmpty and AssertStrNonEmpty suck.  Clean them up?
  - It won't be easy...  They work well.
- It's lame that I need to declare the test function and start the test
  separately.  Make a macro so I can just cunit_test(ints) { ... }
  - I can't figure out an acceptable macro.  :(  It's especially hard
    because the function and the for loop can't share the same '}'.
- Add an epsilon to the floating point comparisons?
  - This is a little scary...  it can confuse the heck out of you if
    you don't know exactly what's going on, make things MORE complex.
  - Don't add until someone wants it and knows how to do it right.
- Make ctest's asserts behave more like regular asserts when used outside
  a ctest_start block.  Raise signals, disappear when NDEBUG is set, etc.
  - not worth the trouble: just #include <assert.h> if you want asserts.
