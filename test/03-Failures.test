# This test ensures our error messages don't change.
#
# (we need to mask hex representations of pointers and negative
# numbers because they will be different on different archs).


# Once tmtest is fully event-based, we can do this:
# # exec 2> >(sed s/0x[A-Z0-9][A-Z0-9]*/0xHEXDIGIT/g 1>&2)
# #  ... run commands ...
# # exec 2>&-
# or this:
# # $tmtest --show-unit-fails > >(sed s/0x[A-Z0-9][A-Z0-9]*/0xHEXDIGIT/g) 2>&1


$ctest -f 2>&1 | \
	sed s/0x[A-Fa-f0-9][A-Fa-f0-9]*/0xHEXDIGIT/g | \
	sed s/^.*\\.c:[0-9]\*:/test.c:NNN:/
	# first sed: hide all hex digits: 0xDECAFBAD
	# second sed: hide filename and line numbers


STDOUT:
test.c:NNN: assert a == b failed. a==4 and b==3!
test.c:NNN: assert a != c failed. a==4 and c==4!
test.c:NNN: assert a > c failed. a==4 and c==4!
test.c:NNN: assert b > c failed. b==3 and c==4!
test.c:NNN: assert b >= a failed. b==3 and a==4!
test.c:NNN: assert c < a failed. c==4 and a==4!
test.c:NNN: assert c < b failed. c==4 and b==3!
test.c:NNN: assert a <= b failed. a==4 and b==3!
test.c:NNN: assert a == 0 failed. a==4!
test.c:NNN: assert z != 0 failed. z==0!
test.c:NNN: assert z > 0 failed. z==0!
test.c:NNN: assert n > 0 failed. n==-1!
test.c:NNN: assert a <= 0 failed. a==4!
test.c:NNN: assert z < 0 failed. z==0!
test.c:NNN: assert a < 0 failed. a==4!
test.c:NNN: assert n >= 0 failed. n==-1!
test.c:NNN: assert a == b failed. a==0xHEXDIGIT and b==0xHEXDIGIT!
test.c:NNN: assert a != c failed. a==0xHEXDIGIT and c==0xHEXDIGIT!
test.c:NNN: assert a > c failed. a==0xHEXDIGIT and c==0xHEXDIGIT!
test.c:NNN: assert b > c failed. b==0xHEXDIGIT and c==0xHEXDIGIT!
test.c:NNN: assert b >= a failed. b==0xHEXDIGIT and a==0xHEXDIGIT!
test.c:NNN: assert c < a failed. c==0xHEXDIGIT and a==0xHEXDIGIT!
test.c:NNN: assert c < b failed. c==0xHEXDIGIT and b==0xHEXDIGIT!
test.c:NNN: assert a <= b failed. a==0xHEXDIGIT and b==0xHEXDIGIT!
test.c:NNN: assert a == 0 failed. a==0xHEXDIGIT!
test.c:NNN: assert z != 0 failed. z==0xHEXDIGIT!
test.c:NNN: assert z > 0 failed. z==0xHEXDIGIT!
test.c:NNN: assert n > 0 failed. n==0xHEXDIGIT!
test.c:NNN: assert a <= 0 failed. a==0xHEXDIGIT!
test.c:NNN: assert z < 0 failed. z==0xHEXDIGIT!
test.c:NNN: assert a < 0 failed. a==0xHEXDIGIT!
test.c:NNN: assert n >= 0 failed. n==0xHEXDIGIT!
test.c:NNN: assert n != NULL failed. n is NULL!
test.c:NNN: assert ap == NULL failed. ap==0xHEXDIGIT!
test.c:NNN: assert ap == bp failed. ap==0xHEXDIGIT and bp==0xHEXDIGIT!
test.c:NNN: assert ap != cp failed. ap==0xHEXDIGIT and cp==0xHEXDIGIT!
test.c:NNN: assert ap > cp failed. ap==0xHEXDIGIT and cp==0xHEXDIGIT!
test.c:NNN: assert bp > cp failed. bp==0xHEXDIGIT and cp==0xHEXDIGIT!
test.c:NNN: assert bp >= ap failed. bp==0xHEXDIGIT and ap==0xHEXDIGIT!
test.c:NNN: assert cp < ap failed. cp==0xHEXDIGIT and ap==0xHEXDIGIT!
test.c:NNN: assert cp < bp failed. cp==0xHEXDIGIT and bp==0xHEXDIGIT!
test.c:NNN: assert ap <= bp failed. ap==0xHEXDIGIT and bp==0xHEXDIGIT!
test.c:NNN: assert a == b failed. a==0.000400 and b==0.000300!
test.c:NNN: assert a != c failed. a==0.000400 and c==0.000400!
test.c:NNN: assert a > c failed. a==0.000400 and c==0.000400!
test.c:NNN: assert b > c failed. b==0.000300 and c==0.000400!
test.c:NNN: assert b >= a failed. b==0.000300 and a==0.000400!
test.c:NNN: assert c < a failed. c==0.000400 and a==0.000400!
test.c:NNN: assert c < b failed. c==0.000400 and b==0.000300!
test.c:NNN: assert a <= b failed. a==0.000400 and b==0.000300!
test.c:NNN: assert a == b failed. a==0.000400 and b==0.000300!
test.c:NNN: assert a != c failed. a==0.000400 and c==0.000400!
test.c:NNN: assert a > c failed. a==0.000400 and c==0.000400!
test.c:NNN: assert b > c failed. b==0.000300 and c==0.000400!
test.c:NNN: assert b >= a failed. b==0.000300 and a==0.000400!
test.c:NNN: assert c < a failed. c==0.000400 and a==0.000400!
test.c:NNN: assert c < b failed. c==0.000400 and b==0.000300!
test.c:NNN: assert a <= b failed. a==0.000400 and b==0.000300!
test.c:NNN: assert a eq b failed. a is "Bogozity" and b is "Arclamp"!
test.c:NNN: assert a ne c failed. a is "Bogozity" and c is "Bogozity"!
test.c:NNN: assert a gt c failed. a is "Bogozity" and c is "Bogozity"!
test.c:NNN: assert b gt c failed. b is "Arclamp" and c is "Bogozity"!
test.c:NNN: assert b ge a failed. b is "Arclamp" and a is "Bogozity"!
test.c:NNN: assert c lt a failed. c is "Bogozity" and a is "Bogozity"!
test.c:NNN: assert c lt b failed. c is "Bogozity" and b is "Arclamp"!
test.c:NNN: assert a le b failed. a is "Bogozity" and b is "Arclamp"!
test.c:NNN: assert a is empty failed. a is: Bogozity
test.c:NNN: assert n is empty failed. n is NULL!
test.c:NNN: assert e is nonempty failed. e[0] is 0!
test.c:NNN: assert n is nonempty failed. n is NULL!
All OK.  24 tests run, 24 successes (139 assertions).
